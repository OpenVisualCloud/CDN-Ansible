---
#
# Copyright 2017 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
# THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Authour: Pushpendra Kumar (pushpendra.kumar@intel.com)
# Intel Corporation
#


# Installing the ffmpeg dependencies for RedHat/CentOS

#  - name: Add epel repository for RedHat/CentOS
#    yum_repository:
#      name: epel
#      state: present
#      description: EPEL YUM repo
#      baseurl: http://dl.fedoraproject.org/pub/epel/$releasever/$basearch/
#      gpgkey: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-{{ ansible_distribution_major_version }}
#      gpgcheck: yes
#      enabled: yes

  - name: Install EPEL repository
    include: epel.yml

  - name: Installing ffmpeg Dependencies for RedHat/CentOS
    become: yes
    yum:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - epel-release
      - automake
      - autoconf
      - bzip2
      - cmake
      - freetype-devel
      - numactl
      - numactl-devel
      - openssl-devel
      - gcc
      - gcc-c++
      - git
      - libtool
      - make
      - mercurial
      - pkgconfig
      - zlib-devel
      - libass
      - libass-devel
      - ca-certificates
      - bison
      - flex
      - patch
      - wget
      - unzip
    register: dependencies
    until: dependencies is success
    retries: 2
    delay: 5


  - name: Create the ffmpeg_sources dir
    become: yes
    file:
      path: "{{ item }}"
      state: directory
      owner: root
      mode: 0755
    with_items:
      - /opt/ffmpeg_sources
#      - /usr/local/build


  # Installing the cmake-3.13
  - name: Downloading cmake-3.13.1
    get_url:
      url: "{{ cmake_url }}"
      dest: "{{ ffmpeg_sources }}/cmake-3.13.1.tar.gz"
      validate_certs: false
      force: yes
    register: cmake_source
 
  - name: Unpacking cmake 
    unarchive:
      dest: "{{ ffmpeg_sources }}"
      src: "{{ ffmpeg_sources }}/cmake-3.13.1.tar.gz"
      remote_src: yes

  - name: Compiling and installing cmake-3.13
    shell: "{{ item }}"
    args:
      chdir: "{{ ffmpeg_sources }}/cmake-3.13.1"
      creates: "{{ ffmpeg_bin_dir }}/cmake-3.13.1"
    with_items:
      - ./bootstrap --prefix="{{ ffmpeg_build_dir }}"
      - make -j$(nproc)
      - make -j$(nproc) install   


  # Installing the NASM
  - name: Downloading NASM sources
    get_url:
      url: "{{ nasm_url }}"
      dest: "{{ ffmpeg_sources }}/nasm-2.13.02.tar.bz2"
      validate_certs: false   
    register: nasm_source
     
  - name: Unpacking NASM
    unarchive:
      dest: "{{ ffmpeg_sources }}"
      src: "{{ ffmpeg_sources }}/nasm-2.13.02.tar.bz2"
      remote_src: yes

  - name: Compiling and  Installing the NASM
    shell: "{{ item }}"
    args:
      chdir: "{{ ffmpeg_sources }}/nasm-2.13.02"
      creates: "{{ ffmpeg_bin_dir }}/nasm-2.13.02"
    with_items:
      - ./autogen.sh
      - ./configure --prefix={{ ffmpeg_build_dir }} --bindir={{ ffmpeg_bin_dir }}
      - make -j$(nproc)
      - make -j$(nproc) install
 

  # Yasm is used by x264 
  - name: Clone yasm from github
    git:
      repo: "{{ yasm_git_url }}"
      dest: "{{ ffmpeg_sources }}/yasm"
      force: yes
      accept_hostkey: yes
      
  - name: Compiling and installing yasm
    shell: "{{ item }}"
    args:
      chdir: "{{ffmpeg_sources}}/yasm"
      creates: "{{ ffmpeg_bin_dir }}/yasm"
    with_items:
      - autoreconf -fiv
      - ./configure --prefix={{ ffmpeg_build_dir }} --bindir={{ffmpeg_bin_dir}}
      - make -j$(nproc)
      - make -j$(nproc) install
         
      
  # H.264 video encoder    
  - name: Cloning libx264 from github
    git:
      repo: "{{ libx264_git_url }}"
      dest: "{{ ffmpeg_sources }}/x264"   

  - name: Compiling and installing libx264
    shell: "{{ item }}"
    args:
      chdir: "{{ ffmpeg_sources }}/x264"
      creates: "{{ ffmpeg_bin_dir }}/x264"
    with_items:
      - ./configure --prefix={{ ffmpeg_build_dir }} --bindir={{ffmpeg_bin_dir}} --enable-static
      - make -j$(nproc)
      - make -j$(nproc) install
      

  # H.265 video encoder
  - name: Cloning libx265 from github
    hg: 
      repo: "{{ libx265_git_url }}"
      dest: "{{ ffmpeg_sources }}/x265"      

  - name: Compiling and installing libx265
    shell: "{{ item }}"
    args:
      chdir: "{{ ffmpeg_sources }}/x265/build/linux"
      creates: "{{ ffmpeg_bin_dir }}/x265"
    with_items:
      - cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="{{ ffmpeg_build_dir }}" -DENABLE_SHARED:bool=off ../../source
      - make -j$(nproc)
      - make -j$(nproc) install

     
  # Opus audio decoder and encoder
  - name: Cloning libopus from github
    git:
      repo: "{{ libopus_git_url }}"
      dest: "{{ ffmpeg_sources }}/opus"

  - name: Compiling and installing libopus 
    shell: "{{ item }}"
    args:
      chdir: "{{ ffmpeg_sources }}/opus"
      creates: "{{ ffmpeg_bin_dir }}/opus"
    with_items:
      - ./autogen.sh
      - ./configure --prefix={{ ffmpeg_build_dir }} --disable-shared
      - make -j$(nproc)
      - make -j$(nproc) install
      
  
  # AAC audio encoder
  - name: Cloning libfdk_aac from github
    git:
      repo: "{{ libfdk_aac_git_url }}"
      dest: "{{ ffmpeg_sources }}/libfdk_aac"
            
  - name: Compiling and installing libfdk_aac
    shell: "{{ item }}"
    args:
      chdir: "{{ ffmpeg_sources }}/libfdk_aac"
      creates: "{{ ffmpeg_bin_dir }}/libfdk_aac"
    with_items:
      - autoreconf -fiv
      - ./configure --prefix={{ ffmpeg_build_dir }} --disable-shared
      - make -j$(nproc)
      - make -j$(nproc) install
    

  # VP8/VP9 video encoder
  - name: Cloning libvpx from github
    git: 
      repo: "{{ libvpx_git_url }}"
      dest: "{{ ffmpeg_sources }}/libvpx"
      version: "tags/v1.7.0"     

  - name: Compiling and installing libvpx
    shell: "{{ item }}"
    args:
      chdir: "{{ ffmpeg_sources }}/libvpx"
      creates: "{{ ffmpeg_bin_dir }}/libvpx"
    with_items:
      - ./configure --prefix={{ ffmpeg_build_dir }} --libdir=/usr/lib64 --enable-shared --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=nasm
      - make -j$(nproc)
      - make -j$(nproc) install      
   

  #MP3 audio encoder   
  - name: Downloading the libmp3lame
    get_url:
      url: "{{ libmp3lame_url }}"
      dest: "{{ ffmpeg_sources }}/libmp3lame.tar.gz"
      validate_certs: false
   
  - name: Unpacking libmp3lame
    unarchive:
      src: "{{ ffmpeg_sources }}/libmp3lame.tar.gz"
      dest: "{{ ffmpeg_sources }}"
      remote_src: yes
   
  - name: Compiling and installing libmp3lame
    shell: "{{ item }}"
    args:
      chdir: "{{ ffmpeg_sources }}/lame-3.100"
      creates: "{{ ffmpeg_bin_dir }}/lame-3.100"
    with_items:
      - ./configure --prefix={{ ffmpeg_build_dir }} --bindir={{ ffmpeg_bin_dir }} --disable-shared --enable-nasm
      - make -j$(nproc)
      - make -j$(nproc) install


  - name: Downloading libogg
    get_url:
      url: "{{ libogg_url }}"
      dest: "{{ ffmpeg_sources }}/libogg-1.3.3.tar.gz"
      validate_certs: false

  - name: Unpacking libogg
    unarchive:
      src: "{{ ffmpeg_sources }}/libogg-1.3.3.tar.gz"
      dest: "{{ ffmpeg_sources }}"
      remote_src: yes
      
  - name: Compiling and installing libogg
    shell: "{{ item }}"
    args:
      chdir: "{{ ffmpeg_sources }}/libogg-1.3.3"
      creates: "{{ ffmpeg_bin_dir }}/libogg-1.3.3"
    with_items:
      - ./configure --prefix={{ ffmpeg_build_dir }} --disable-shared
      - make -j$(nproc)
      - make -j$(nproc) install


  - name: Downloading libvorbis
    get_url:
      url: "{{libvorbis_url}}"
      dest: "{{ ffmpeg_sources }}/libvorbis-1.3.5.tar.gz"
      validate_certs: false

  - name: Unpacking libogg
    unarchive:
      src: "{{ ffmpeg_sources }}/libvorbis-1.3.5.tar.gz"
      dest: "{{ ffmpeg_sources }}"
      remote_src: yes

  - name: Compiling and installing libvorbis
    shell: "{{ item }}"
    args:
      chdir: "{{ ffmpeg_sources }}/libvorbis-1.3.5"
      creates: "{{ ffmpeg_bin_dir }}/libvorbis-1.3.5"
    with_items:
      - ./configure --prefix={{ ffmpeg_build_dir }} --with-ogg={{ ffmpeg_build_dir }}  --disable-shared
      - make -j$(nproc)
      - make -j$(nproc) install
